[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Welcome to my blog !\nI am a R trainer and developer. Passionate about knowledge sharing and open source, I enjoy engaging with my peers and learners and contributing to a dynamic and collaborative community.\nI used to have a blog a few years ago, based on Hugo (in French only).\nI have decided to give a try to Quarto Websites. This new site aims at sharing my thoughts and knowledge about R, data science, epidemiology-related stuff.\nBesides videos and blog posts present on this website, you can find some of my contributions to open source projects on Github :\n\n{shinygouv} - Use the French Governmental Design System (DSFR) on you shiny apps‚Äù\n{lozen} - Github and Gitlab project management tools for devs and lead dev‚Äù\n{fusen} - Inflates a Rmarkdown file to magically create a package.‚Äù\n\nI hope you will enjoy reading my posts. Feel free to contact me if you have any questions !"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "Welcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nNov 5, 2024\n\n\nYohann Mansiaux\n\n\n\n\n\n\n\n\n\n\n\n\nPimping your {shiny} app with a JavaScript library : an example using sweetalert2\n\n\n\n\n\n\nshiny\n\n\njavascript\n\n\n\n\n\n\n\n\n\nApr 30, 2024\n\n\nYohann Mansiaux\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "R trainer and developer üñ•Ô∏è\nData scientist üìä\nEpidemiology and life science lover ü¶†\nBadminton player üè∏"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Pimping your {shiny} app with a JavaScript library : an example using sweetalert2",
    "section": "",
    "text": "You think that some of the components of {shiny} are not very functional or downright austere? Are you looking to implement some feature in your app but it is not available in the {shiny} toolbox? Take a look at JavaScript!\nJavaScript is a very popular programming language that is often used to add features to web pages. With HTML and CSS, JavaScript is an essential language for web developers. The size of its user community means that if you are looking to implement a particular feature, there is a good chance that someone has already had the same need as you and has shared their code!\nAn other positive point (and essential for us in this case) : it is possible to integrate JavaScript libraries into a {shiny} application to add features that are not available by default. In addition to that, {golem} will help us to set everything up.\nNo more excuses to back down, let‚Äôs go ! üöÄ"
  },
  {
    "objectID": "posts/post-with-code/index.html#tldr",
    "href": "posts/post-with-code/index.html#tldr",
    "title": "Pimping your {shiny} app with a JavaScript library : an example using sweetalert2",
    "section": "TL;DR",
    "text": "TL;DR\n\nGoing further in {shiny} by integrating a JavaScript library is possible!\n\nWe take the example of sweetalert2, which allows to display alerts that are more visually appealing than the basic ones\n{golem} has several functions to make it easier for us to integrate JavaScript libraries into a {shiny} app\nThis example is rather simple. The integration of libraries is sometimes harder because the documentation might be scarse or the library might be more complex to use"
  },
  {
    "objectID": "posts/post-with-code/index.html#import-sweetalert2-into-a-shiny-app-created-with-golem",
    "href": "posts/post-with-code/index.html#import-sweetalert2-into-a-shiny-app-created-with-golem",
    "title": "Pimping your {shiny} app with a JavaScript library : an example using sweetalert2",
    "section": "Import sweetalert2 into a {shiny} app created with {golem}",
    "text": "Import sweetalert2 into a {shiny} app created with {golem}\n\nsweetalert2\n\nsweetalert2 is a JavaScript library that allows you to display alerts that are more visually appealing than the basic ones\nIt is very well documented\nIt is very popular (more than 16000 ‚Äústars‚Äù on GitHub at the time of publication of this article)\n\nLet‚Äôs take a look at the possibilities offered by sweetalert2: https://sweetalert2.github.io/\n\n\n\n\n\n\n\n\n\nIf you click on ‚ÄúShow normal alert‚Äù, you will see a classic alert while clicking on ‚ÄúShow success message‚Äù, you will see a sweetalert2 alert.\nThe first one has a rather austere design while the second one is more modern and more pleasant to the eye, it will probably offer a better user experience.\nFeel free to play with the different types of alerts offered by sweetalert2 to get an idea of what is possible with this library by visiting the examples section.\n\n\nAdd the necessary dependencies to the {shiny} app\nThe following sections assume that you have already created a {shiny} app with {golem}.\nIf this is not the case and you want to know more about {golem}, I invite you to consult the official documentation.\nTo add sweetalert2 to your {shiny} app, you will need to find a way to incorporate the files needed for its operation into your application.\nTwo solutions are available to you:\n\nUse a ‚ÄúCDN‚Äù (Content Delivery Network) to load the files from a third-party server. The CDN will be the equivalent of a CRAN for JavaScript libraries. Concretely, we will ask our application to point to the sources of sweetalert2, hosted on a remote server.\nDownload the files needed for its operation and integrate them directly into your application. If your application is intended to be used on a machine that is not connected to the Internet, you will inevitably have to go through this step.\n\nDon‚Äôt panic! We will see both methods\n\nWhere to find the elements I need?\nThe sweetalert2 documentation is very well done. You will find all the information you need to integrate the library into your application from the Download section.\nHowever, you will need to learn how to identify the elements you need to integrate sweetalert2 into your application.\nLooking for the CDN\nIn the ‚ÄúDownload & Install‚Äù section, you will find a link to the sweetalert2 CDN. This is the link that we will have to add to our application in order to use the library.\n\n\n\n\n\n\n\n\n\nWhen you click on the link, you will arrive on a page that looks like this:\n\n\n\n\n\n\n\n\n\nWhat we are interested in here is the link in the &lt;script&gt; tag and the link in the &lt;link&gt; tag. The link to the file with the .js extension corresponds to the sweetalert2 JavaScript file. The link to the file with the .css extension corresponds to the sweetalert2 styles file.\nCopy them and let‚Äôs go back to our app!\n\n\nMethod 1: Add dependencies to sweetalert2 via the CDN\nLet‚Äôs open the R/app_ui.R file of our application and add the two links we copied earlier to the body of the golem_add_external_resources() function.\ngolem_add_external_resources &lt;- function() {\n  add_resource_path(\n    \"www\",\n    app_sys(\"app/www\")\n  )\n\n  tags$head(\n    favicon(),\n    bundle_resources(\n      path = app_sys(\"app/www\"),\n      app_title = \"golemsweetalert\"\n    ),\n    # sweetalert2\n    tags$script(src = \"https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.all.min.js\"),\n    tags$link(href = \"https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.min.css\",\n              rel=\"stylesheet\")\n \n  )\n}\nWe find here a call to tags$script and a call to tags$link corresponding respectively to the &lt;script&gt; and &lt;link&gt; tags seen on the links provided by the CDN.\nWe copy-paste the elements being careful about the parameter names src, href and rel and remembering to separate them with commas. We are indeed moving from HTML code (where elements are separated by spaces) to R code.\n\n\nMethod 2: Add dependencies to sweetalert2 locally\nThe links identified earlier will also be useful to download the files needed to use sweetalert2.\nThe link to the JavaScript file will be passed to the golem::use_external_js_file() function while the link to the CSS file will be passed to the golem::use_external_css_file() function.\nTo keep a record of this, we will save the following commands in the dev/02_dev.R file in the ‚ÄúExternal resources‚Äù section.\ngolem::use_external_js_file(\"https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.all.min.js\")\ngolem::use_external_css_file(\"https://cdn.jsdelivr.net/npm/sweetalert2@11.10.7/dist/sweetalert2.min.css\")\nBoth files are now present in the inst/app/www folder of our application project.\n\n\n\n\n\n\n\n\n\nEverything is ok, we can continue our journey üëç.\n\n\n\nHow to know if sweetalert2 is correctly imported into my {shiny} app?\nTo check that sweetalert2 is correctly imported into our application, we open our browser and then the development console.\nBefore that, let‚Äôs launch our app with golem::run_dev()!\nNB: The following screenshots were taken with the Google Chrome browser.\nOn the window of our application, we right-click and select ‚ÄúInspect‚Äù. In the new window that opens, we choose the ‚ÄúConsole‚Äù tab and then type the command Swal.fire(\"Hello sweetalert2!\"). This console allows us to execute JavaScript code, which will be interpreted by our browser.\nIf everything went well, we should see a sweetalert2 alert appear! Otherwise, we might have an error message in red (which we will have to learn to decipher, as with an R console :-)).\n\n\n\n\n\n\n\n\n\nIt works! üéâ\n\nHow did I know I had to type Swal.fire(\" .... \")?\nThanks to the documentation! By going to the sweetalert2 page, we find many examples of using the library. In this case, to display an alert, you have to use the Swal.fire() function. As for learning a new R package, we see that documentation (when it exists ‚Ä¶) is of paramount importance for the handling of JavaScript libraries."
  },
  {
    "objectID": "posts/post-with-code/index.html#create-a-sweetalert2-alert-in-our-shiny-app",
    "href": "posts/post-with-code/index.html#create-a-sweetalert2-alert-in-our-shiny-app",
    "title": "Pimping your {shiny} app with a JavaScript library : an example using sweetalert2",
    "section": "Create a sweetalert2 alert in our {shiny} app",
    "text": "Create a sweetalert2 alert in our {shiny} app\nNow that we have imported sweetalert2 into our application and checked that the import went well, we are going to create a function that will allow us to call sweetalert2 from our application.\nWe are going to try to incorporate the ‚ÄúA title with a text under‚Äù alert into our application.\n\n\n\n\n\n\n\n\n\nThree elements can be set here: - The title of the alert - The text of the alert - The type of alert (success, error, warning, info, question) and its associated icon\n\n\n\n\n\n\n\n\n\nWe can easily imagine how to modify these elements directly in the JavaScript code but we don‚Äôt know yet how to create this alert via R code. Let‚Äôs go!\n\nCreate a JavaScript file to call sweetalert2\nIn order to call sweetalert2 from our application, we are going to create a JavaScript file in which we will write a function that will allow us to create an alert.\nLet‚Äôs create a inst/app/www/sweet_alert.js file in which we will paste the code to create the alert selected earlier. We could have created this file manually, but we will take advantage of the features offered by {golem} to do so.\nLet‚Äôs go to the dev/02_dev.R file! We add the following line in the ‚ÄúExternal Resources‚Äù section:\ngolem::add_js_handler(\"sweet_alert\")\nThe file name doesn‚Äôt matter, but it is important to respect the .js extension so that the file is correctly interpreted as JavaScript code. We could have also created subfolders if we had had many imports and files to manage. The only prerequisite is that everything is located in the inst/app/www directory.\nWe obtain a slightly strange skeleton, which will in fact be the skeleton of a JavaScript function, usable in our {shiny} application:\n$( document ).ready(function() {\n  Shiny.addCustomMessageHandler('fun', function(arg) {\n \n  })\n});\nWe are going to substitute the term 'fun' with the name of the function we want to call in our {shiny} application and add the code to create the sweetalert2 alert.\nWe therefore obtain the following code:\n$( document ).ready(function() {\n  Shiny.addCustomMessageHandler('alert_title_and_text_under', function(arg) {\n    Swal.fire({\n      title: \"The Internet?\",\n      text: \"That thing is still around?\",\n      icon: \"question\"\n    });\n  })\n});\nOur parameters ‚Äútitle‚Äù, ‚Äútext‚Äù and ‚Äúicon‚Äù are fixed, we need to find a way to make them vary according to the choices of the user. We can notice the existence of a ‚Äúarg‚Äù parameter in the Shiny.addCustomMessageHandler() function. It is this parameter that will allow us to transmit information to our JavaScript function.\nLet‚Äôs modify our code:\n$( document ).ready(function() {\n  Shiny.addCustomMessageHandler('alert_title_and_text_under', function(arg) {\n    Swal.fire({\n      title: arg.title,\n      text: arg.text,\n      icon: arg.icon\n    });\n  })\n});\nThe notation to use here will be arg.parameter_name to access the values transmitted by our {shiny} application. The notation with the ‚Äú.‚Äù is a JavaScript convention for accessing object properties. To make the parallel with R, it‚Äôs a bit like if we were doing arg$parameter_name.\nOur JavaScript code is ready! Let‚Äôs move back to the R side!\n\n\nWhat if we tested all this in our {shiny} app (FINALLY!)?\nWe are going to add a button in the R/app_ui.R file:\napp_ui &lt;- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      h1(\"golemsweetalert\"),\n      actionButton(inputId = \"show_alert\",\n                   label = \"Alert demo\")\n    )\n  )\n}\nOn the server side, we add an observeEvent() in the R/app_server.R file, which will call our JavaScript function to generate an alert when the user clicks on the ‚ÄúAlert demo‚Äù button.\nOnce more, {golem} will make our life easier! We will use the golem::invoke_js() function to call our JavaScript function.\nTwo parameters are passed to golem::invoke_js():\n\nthe first parameter corresponds to the name of the JavaScript function to call\nthe second parameter corresponds to a list of parameters, the JavaScript equivalent of our arg object which will be used to transmit the information necessary to create the sweetalert2 alert. The names used in the list here must correspond to the names used in the JavaScript function for the arg parameter (‚Äútitle‚Äù, ‚Äútext‚Äù and ‚Äúicon‚Äù).\n\napp_server &lt;- function(input, output, session) {\n  # Your application server logic\n  observeEvent(\n    input$show_alert,{\n      golem::invoke_js(\n        \"alert_title_and_text_under\",\n        list(\n          title = \"Title\",\n          text = \"Text\",\n          icon = \"success\"\n        ))\n    }\n  )\n}\nWe run a call to golem::run_dev() to see our application in action!\n\n\n\n\n\n\n\n\n\nCongratulations! üëè\nTo make everything more elegant, we can create an R function that will call golem::invoke_js().\n\n\nCreate an R function to call sweetalert2\nWe are going to go through {golem} to create our function. To do this, we will add the following line in the dev/02_dev.R file of our application:\ngolem::add_fct(\"create_alert_title_and_text_under\")\nWe obtain a R/fct_create_alert_title_and_text_under.R file in which we will be able to write our function, which will call the JavaScript code created in the previous step.\n#' create_alert_title_and_text_under\n#'\n#' @description Creates an alert with a title, a text and an icon\n#' @param title alert title\n#' @param text alert text\n#' @param icon alert icon\n#' @return side effect : creates an alert\n#'\n#' @noRd\ncreate_alert_title_and_text_under &lt;- function(\n    title = \"Title\",\n    text = \"Text\",\n    icon = \"success\"\n    ) {\n  golem::invoke_js(\n    \"alert_title_and_text_under\",\n    list(\n      title = title,\n      text = text,\n      icon = icon\n    )\n  )\n}\nLet‚Äôs modify both the R/app_ui.R and R/app_server.R files to be able to define the parameters of our alert through choices made by the user.\napp_ui &lt;- function(request) {\n  tagList(\n    # Leave this function for adding external resources\n    golem_add_external_resources(),\n    # Your application UI logic\n    fluidPage(\n      h1(\"golemsweetalert\"),\n      textInput(inputId = \"title\",\n                label = \"title\"),\n      textInput(inputId = \"text\",\n                label = \"text\"),\n      radioButtons(inputId = \"icon\",\n                   label = \"icon\",\n                   choices = c(\"warning\", \"error\", \"success\", \"info\", \"question\")),\n      actionButton(inputId = \"show_alert\",\n                   label = \"Alert demo\")\n    )\n  )\n}\nTo define the list of possible ‚Äúchoices‚Äù for the radioButtons, we took the possible values for the icon parameter of sweetalert2, as indicated in the official documentation: https://sweetalert2.github.io/#icon.\napp_server &lt;- function(input, output, session) {\n  # Your application server logic\n  observeEvent(\n    input$show_alert,{\n      create_alert_title_and_text_under(\n        title = input$title,\n        text = input$text,\n        icon = input$icon\n      )\n    }\n  )\n}\nLet‚Äôs finally call golem::run_dev()!\n\n\n\n\n\n\n\n\n\nBravo ! üëè"
  },
  {
    "objectID": "posts/post-with-code/index.html#and-a-more-complex-example",
    "href": "posts/post-with-code/index.html#and-a-more-complex-example",
    "title": "Pimping your {shiny} app with a JavaScript library : an example using sweetalert2",
    "section": "And a more complex example?",
    "text": "And a more complex example?\nFollowing the previous steps, it is relatively easy to add additional elements to an alert, such as an image or confirmation / cancellation buttons. A slightly deeper dive into the sweetalert2 documentation will help you understand how to add these elements.\nLet‚Äôs see what is possible to achieve:\n\n\n\n\n\n\n\n\n\nYou are curious to know more? Go to this project source code."
  },
  {
    "objectID": "posts/post-with-code/index.html#conclusion",
    "href": "posts/post-with-code/index.html#conclusion",
    "title": "Pimping your {shiny} app with a JavaScript library : an example using sweetalert2",
    "section": "Conclusion",
    "text": "Conclusion\n\nIntegrating JavaScript libraries into a {shiny} application is possible!\n{golem} makes it easier for us\nIt is quite easy when the library is well documented\nIt is important to read the documentation of the library you want to integrate (but this is also true in R!)\nThe browser inspector is a very useful tool to check that everything is going well\nTo integrate more complex libraries, minimal JavaScript skills will probably be required\n\nIf you want more examples of the use of sweetalert2, but also other JavaScript libraries (Grid.js and Chart.js), you can consult the mycomicslibrary application and take a look at its source code.\nThanks for reading this tutorial and have fun in the wonderful world of JavaScript! üöÄ"
  }
]